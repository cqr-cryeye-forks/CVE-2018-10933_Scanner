#!/usr/bin/env python
#_*_ coding: utf8 _*_

import urllib
import json
import sys
import time
import argparse
import socket
from colorama import Fore
from os import path

green = Fore.LIGHTGREEN_EX
red = Fore.LIGHTRED_EX
blue = Fore.LIGHTBLUE_EX
cyan = Fore.LIGHTCYAN_EX
yellow = Fore.LIGHTYELLOW_EX

parse = argparse.ArgumentParser(description="libssh scanner CVE-2018-10933",version='1')
parse.add_argument('-t','--target',help="Objetivo | target")
parse.add_argument('-f','--file',help="Lista de objetivos | target list")
parse.add_argument('-g','--geolocation',help="Localizar servidor",action="store_true")
parser = parse.parse_args()


def banner():
	print("""{}
 _____ _____ _____     ___ ___ ___   ___     ___   ___ ___ ___ ___
|     |  |  |   __|___|_  |   |_  | | . |___|_  | |   | . |_  |_  |
|   --|  |  |   __|___|  _| | |_| |_| . |___|_| |_| | |_  |_  |_  |
|_____|\___/|_____|   |___|___|_____|___|   |_____|___|___|___|___|

\t\t\t\t{}SCANNER
\t\t{}  HTTPS://WWW.FACEBOOK.COM/RELDSEC
""".format(yellow,cyan,cyan))

def geolocation(target):
	list_keys = []
	urljson = urllib.urlopen("http://ipinfo.io/{}/json".format(target))
	dar = json.loads(urljson.read())
	for n in dar:
		list_keys.append(n)

	for l in list_keys:
		print('{}{} : {}'.format(yellow,l,dar[l]))

def connect_target(target,port=22):
	s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	try:
		s.connect((target,port))
		s.send('\0')
		try:
			banner = s.recv(2048)
			if '0.6.0' in banner:
				print(green)
				print("\n=========================================\n")
				print("Target vulnerable!: {}".format(target))
				print("\tlibssh version: 0.6.0")
				print("    Banner: {}".format(banner))
				if parser.geolocation:
					geolocation(target)
				else:
					pass
				print(green + "\n=========================================\n")
			else:
				print(red)
				print("\n=========================================\n")
				print("Target no vulnerable: {}".format(target))
				print("Version: {}".format(banner))
				print("\n========================================\n")
		except:
			pass
	except:
		print("{}Ocurrio un error en la deteccion en: {}".format(red,target))

def connect_wordlist(list1,port=22):
	if path.exists(list1):
		lista = open(list1,'r')
		lista = lista.read().split('\n')
		print("{}Targets: {}\n".format(green,len(lista)))
		for t in lista:
			s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
			try:
				s.connect((t,port))
				s.send('\0')
				try:
					banner = s.recv(2048)
					if '0.6.0' in banner:
						print(green)
						print("\n=========================================\n")
						print("Target vulnerable!: {}".format(t))
						print("\tlibssh version: 0.6.0")
						print("    Banner: {}".format(banner))
						if parser.geolocation:
							geolocation(t)
						else:
							pass
						print(green + "\n=========================================\n")
					else:
						print(red)
						print("\n=========================================\n")
						print("Target no vulnerable: {}".format(t))
						print("    Version: {}".format(banner))
						print("\n========================================\n")
				except:
					pass
			except:
				print("{}Ocurrio un error en la deteccion en {}".format(red,t))
def main():
	if parser.target:
		banner()
		print("{}Buscando vulnerabilidad en: {}".format(green,parser.target))
		connect_target(parser.target)
	elif parser.file:
		banner()
		connect_wordlist(parser.file)
	else:
		print("{}Argumentos requeridos".format(red))

if __name__ == '__main__':
	try:
		main()
	except KeyboardInterrupt:
		print("Saliendo...")
		time.sleep(1)
		sys.exit(1)
